##############################################################################################
# Packages utilisés : dplyr, ggplot2, GGALLY, ClusVarLV, Factominer, igraph, ppcor, plsdepot # 
##############################################################################################


#######################
# Lecture des données #
#######################

sport_data <- read.table("C:/Users/chris/Documents/Portable EDF (14-11-2022)/JdS Bordeaux - 2024/Evénement satellite/Data_évènement_satellite.csv",header=TRUE,sep=",")

#######################################################################################
# Liste des variables de l'étude                                                      #
#                                                                                     #
# ID : Identifiant                                                                    #
# Age : Age                                                                           #
# Gender : Genre                                                                      #
# Height : Taille (en cm)                                                             #
# Weight : Poids (en kg)                                                              #
# Sports_per_week : Nombre d'heures de sport par semaine en moyenne                   #
# 40m_sprint : temps (en seconde)                                                     #
# Free_throw : Nombre de paniers réussis sur 10 lancers                               #
# Wheelchair_race : Temps de parcours fauteuil en pratiquant des « huit » (en mètres) #
# Golf_strike_length : Distance max parcourue par la balle (en mètres)                #
# Bench_press_reps : Nombre de répétitions de soulevé de la barre de développé-couché #
# Climbing_max_strength : Force maximale d'escalade                                   #                                                       
# Climbing_critical_strength : Force critique d'escalade                              # 
# Average_heart_rate : Fréquence cardiaque moyenne (nbre de pulsations par minute)    #
#                                                                                     #
#######################################################################################

# Rajout de l'IMC ##
sport_data$IMC <- sport_data$Weight/(sport_data$Height/100)^2


#############################
# Visualisation des données #
#############################

# Cartographie sur données non standardisées
z <- as.matrix(t(sport_data[,-c(1,3)]))
n <- nrow(z)
p <- ncol(z)
x <- seq(1,p,length.out=p)
y <- seq(1,n,length.out=n)
rownames(z) <- c("Age","Height","Weight","Sports_per_week","40m_sprint","Free_throw","Wheelchair_race","Golf_strike_length","Bench_press_reps","Climbing_max_strength","Climbing_critical_strength","Average_heart_rate")
par(oma=c(0,5,0,0),bg="white")
image(x,y,z,xlab="Variables",ylab="",main="Représentation des données Data Sport (non standardisées)",axes=FALSE)
axis(1, at = x,labels = rownames(z),las=1,cex.axis=1.2)
axis(2, at = y,labels = ,las=2,cex.axis=1)

# Cartographie sur données standardisées
sport_data_stand <- scale(sport_data[,-c(1,3)])
sport_data_stand <- data.frame(sport_data_stand)
z <- as.matrix(t(sport_data_stand))
x <- seq(1,p,length.out=p)
y <- seq(1,n,length.out=n,)
c("Age","Height","Weight","Sports_per_week","40m_sprint","Free_throw","Wheelchair_race","Golf_strike_length","Bench_press_reps","Climbing_max_strength","Climbing_critical_strength","Average_heart_rate")
par(oma=c(0,5,0,0),bg="white")
image(x,y,z,xlab="Variables",ylab="",main="Représentation des données Sport (standardisées)",axes=FALSE)
axis(1, at = x,labels = rownames(z),las=1,cex.axis=1.2)
axis(2, at = y,labels = ,las=2,cex.axis=1)

# Cartographie des corrélations
col1 <- colorRampPalette(c("#7F0000", "red", "#FF7F00", "yellow", "white",
                           "cyan", "#007FFF", "blue", "#00007F"))
col2 <- colorRampPalette(c("#67001F", "#B2182B", "#D6604D", "#F4A582",
                           "#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
                           "#4393C3", "#2166AC", "#053061"))
col3 <- colorRampPalette(c("red", "white", "blue")) 
col4 <- colorRampPalette(c("#7F0000", "red", "#FF7F00", "yellow", "#7FFF7F",
                           "cyan", "#007FFF", "blue", "#00007F"))
whiteblack <- c("white", "black")
corrplot(cor(sport_data[,-c(1,3)]), method = "color", order = "hclust", addrect = 2, col = col1(100)) 

# Scatter-plots
ggpairs(sport_data[,-1])


##########################
# Réduction de dimension #
##########################

# ACP : toutes les variables numériques sont actives : Attention il y a une corrélation structurelle entre IMC, et taille et poids
acp_sport_data_all <- PCA(sport_data[,-c(1,3)], axes=c(1,2))
acp_sport_data_all <- PCA(sport_data[,-c(1,3)], axes=c(1,3))
acp_sport_data_all <- PCA(sport_data[,-c(1,3)], axes=c(2,3))

# ACP : seules les variables endogènes sont actives, les variables exogènes sont supplémentaires avec le genre: Attention il y a une corrélation structurelle entre IMC, et taille et poids
acp_sport_data_endo <- PCA(sport_data[,-1],quanti.sup=c(1,3,4,5,15),quali.sup=2,axes=c(1,2))
acp_sport_data_endo <- PCA(sport_data[,-1],quanti.sup=c(1,3,4,5,15),quali.sup=2,axes=c(1,3))
acp_sport_data_endo <- PCA(sport_data[,-1],quanti.sup=c(1,3,4,5,15),quali.sup=2,axes=c(2,3))

# ACP : toutes les variables numériques sont actives : IMC est éliminé
acp_sport_data_all <- PCA(sport_data[,-c(1,3,15)], axes=c(1,2))
acp_sport_data_all <- PCA(sport_data[,-c(1,3,15)], axes=c(1,3))
acp_sport_data_all <- PCA(sport_data[,-c(1,3,15)], axes=c(2,3))

# ACP : seules les variables endogènes sont actives, les variables exogènes sont supplémentaires avec le genre : IMC a été éliminé
acp_sport_data_endo <- PCA(sport_data[,-c(1,15)],quanti.sup=c(1,3,4,5),quali.sup=2,axes=c(1,2))
acp_sport_data_endo <- PCA(sport_data[,-c(1,15)],quanti.sup=c(1,3,4,5),quali.sup=2,axes=c(1,3))
acp_sport_data_endo <- PCA(sport_data[,-c(1,15)],quanti.sup=c(1,3,4,5),quali.sup=2,axes=c(2,3))

# ACP : toutes les variables numériques sont actives : la taille et le poids ont été éliminés au profit de IMC
acp_sport_data_all <- PCA(sport_data[,-c(1,3,4,5)], axes=c(1,2))
acp_sport_data_all <- PCA(sport_data[,-c(1,3,4,5)], axes=c(1,3))
acp_sport_data_all <- PCA(sport_data[,-c(1,3,4,5)], axes=c(2,3))

# ACP : seules les variables endogènes sont actives, les variables exogènes sont supplémentaires avec le genre : la taille et le poids ont été éliminés au profit de IMC
acp_sport_data_endo <- PCA(sport_data[,-c(1,4,5)],quanti.sup=c(1,3,8),quali.sup=2,axes=c(1,2))
acp_sport_data_endo <- PCA(sport_data[,-c(1,4,5)],quanti.sup=c(1,3,8),quali.sup=2,axes=c(1,3))
acp_sport_data_endo <- PCA(sport_data[,-c(1,4,5)],quanti.sup=c(1,3,8),quali.sup=2,axes=c(2,3))

# Classification de variables : the squared covariance is used as a measure of proximity (directional groups) - IMC a été éliminé
clv_sport_data <- CLV(sport_data[,-c(1,3,15)],method="directional")
plot(clv_sport_data)
summary(clv_sport_data)
# Please, give the number of groups : 2

# Classification de variables : the covariance is used as a measure of proximity (local groups) - IMC a été éliminé
clv_sport_data <- CLV(sport_data[,-c(1,3,15)],method="local")
plot(clv_sport_data)
summary(clv_sport_data)
# Please, give the number of groups : 2

# Classification de variables : the squared covariance is used as a measure of proximity (directional groups) - taille et poids ont été éliminés au profit de IMC
clv_sport_data <- CLV(sport_data[,-c(1,3,4,5)],method="directional")
plot(clv_sport_data)
summary(clv_sport_data)
# Please, give the number of groups : 2

# Classification de variables : the covariance is used as a measure of proximity (local groups) - taille et poids ont été éliminés au profit de IMC
clv_sport_data <- CLV(sport_data[,-c(1,3,4,5)],method="local")
plot(clv_sport_data)
summary(clv_sport_data)
# Please, give the number of groups : 2


# Classification des individus les variables exogènes et endogènes : IMC a été éliminé
d.sport_data_stand <- dist(sport_data_stand[,-15])

cah.ward <- hclust(d.sport_data_stand,method="ward.D2")
cah.ward$height <- cah.ward$height^2/2
plot(cah.ward)
#dendrogramme avec matérialisation des groupes
rect.hclust(cah.ward,k=3)
#découpage en 3 groupes
groupes.cah_ward <- cutree(cah.ward,k=3)

n=5
cah.ward$height <- cah.ward$height/n
SMR2_Cm <- cah.ward$height/(sum(d.sport_data_stand^2)/((n-1)^2))
som_SMR2_Cm=0
R2_Cm <- matrix(0,nrow=4)
for (i in 1:4)
    {som_SMR2_Cm=som_SMR2_Cm+SMR2_Cm[i]
     R2_Cm[i]=round((1-som_SMR2_Cm)*100,4)
    }
SMR2_Cm <- SMR2_Cm*100
res_ward <- data.frame(cah.ward$height,SMR2_Cm,R2_Cm)
etape <- 1:4
nb_cls <- 5:2
process <- data.frame(etape,nb_cls,res_ward)
par(oma=c(0,12,0,12)+1,bg="white")
plot (process$etape, process$SMR2_Cm, type = "n", xlab="Etapes",ylab="Proportion de variation Ward",main="")
text (process$etape, process$SMR2_Cm, process$nb_cls,col='red',cex=1)


# Classification des individus les variables endogènes
d.sport_data_stand <- dist(sport_data_stand[,5:8])

cah.ward <- hclust(d.sport_data_stand,method="ward.D2")
cah.ward$height <- cah.ward$height^2/2
plot(cah.ward)
#dendrogramme avec matérialisation des groupes
rect.hclust(cah.ward,k=3)
#découpage en 3 groupes
groupes.cah_ward <- cutree(cah.ward,k=3)

cah.ward$height <- cah.ward$height/n
SMR2_Cm <- cah.ward$height/(sum(d.sport_data_stand^2)/((n-1)^2))
som_SMR2_Cm=0
n1 < n-1
R2_Cm <- matrix(0,nrow=n1)
for (i in 1:n1)
    {som_SMR2_Cm=som_SMR2_Cm+SMR2_Cm[i]
     R2_Cm[i]=round((1-som_SMR2_Cm)*100,4)
    }
SMR2_Cm <- SMR2_Cm*100
res_ward <- data.frame(cah.ward$height,SMR2_Cm,R2_Cm)
etape <- 1:n1
nb_cls <- n:2
process <- data.frame(etape,nb_cls,res_ward)
par(oma=c(0,12,0,12)+1,bg="white")
plot (process$etape, process$SMR2_Cm, type = "n", xlab="Etapes",ylab="Proportion de variation Ward",main="")
text (process$etape, process$SMR2_Cm, process$nb_cls,col='red',cex=1)

# Description des classes
fusion <- data.frame(sport_data,as.character(groupes.cah_ward))
res.descrip <- catdes(fusion[,-1], num.var=16, proba=0.1)
res.descrip

#positionnement des groupes dans le plan factoriel avec étiquettes des points
par(oma=c(0,12,0,12),bg="white")
plot(acp_sport_data_endo$ind$coord[,1],acp_sport_data_endo$ind$coord[,2],type="n",xlab="Z_1 (52,2,0%)",ylab="Z_2 (36,3%)",main="Premier plan - Sport")
text(acp_sport_data_endo$ind$coord[,1],acp_sport_data_endo$ind$coord[,2],col=c("red","green","blue")[groupes.cah_ward],cex=2,labels=rownames(acp_sport_data_endo$ind$coord))
abline(h=0)
abline(v=0)


################
# Modélisation #
################

## Modèle linéaire gaussien ##
# Attention il y a une corrélation structurelle entre IMC, et taille et poids

MLG_Free_throw <- lm(Free_throw~Age+Gender+Height+Weight+Sports_per_week+IMC,data=sport_data)
summary(MLG_Free_throw)

MLG_Bench_press_reps <- lm(Bench_press_reps~Age+Gender+Height+Weight+Sports_per_week+IMC,data=sport_data)
summary(MLG_Bench_press_reps)

MLG_Wheelchair_race <- lm(Wheelchair_race~Age+Gender+Height+Weight+Sports_per_week+IMC,data=sport_data)
summary(MLG_Wheelchair_race)

MLG_Golf_strike_length <- lm(Golf_strike_length~Age+Gender+Height+Weight+Sports_per_week+IMC,data=sport_data)
summary(MLG_Golf_strike_length)

MLG_40m_sprint <- lm(40m_sprint~Age+Gender+Height+Weight+Sports_per_week+IMC,data=sport_data)
summary(MLG_40m_sprint)

MLG_Climbing_max_strength <- lm(Climbing_max_strength~Age+Gender+Height+Weight+Sports_per_week+IMC,data=sport_data)
summary(MLG_Climbing_max_strength)

MLG_Climbing_critical_strength <- lm(Climbing_critical_strength~Age+Gender+Height+Weight+Sports_per_week+IMC,data=sport_data)
summary(MLG_Climbing_critical_strength)

MLG_Average_heart_rate <- lm(Average_heart_rate~Age+Gender+Height+Weight+Sports_per_week+IMC,data=sport_data)
summary(MLG_Average_heart_rate)


## Modèle linéaire gaussien ##
# IMC a été éliminé

MLG_Free_throw <- lm(Free_throw~Age+Gender+Height+Weight+Sports_per_week,data=sport_data)
summary(MLG_Free_throw)

MLG_Bench_press_reps <- lm(Bench_press_reps~Age+Gender+Height+Weight+Sports_per_week,data=sport_data)
summary(MLG_Bench_press_reps)

MLG_Wheelchair_race <- lm(Wheelchair_race~Age+Gender+Height+Weight+Sports_per_week,data=sport_data)
summary(MLG_Wheelchair_race)

MLG_Golf_strike_length <- lm(Golf_strike_length~Age+Gender+Height+Weight+Sports_per_week,data=sport_data)
summary(MLG_Golf_strike_length)

MLG_40m_sprint <- lm(40m_sprint~Age+Gender+Height+Weight+Sports_per_wee,data=sport_data)
summary(MLG_40m_sprint)

MLG_Climbing_max_strength <- lm(Climbing_max_strength~Age+Gender+Height+Weight+Sports_per_week,data=sport_data)
summary(MLG_Climbing_max_strength)

MLG_Climbing_critical_strength <- lm(Climbing_critical_strength~Age+Gender+Height+Weight+Sports_per_week,data=sport_data)
summary(MLG_Climbing_critical_strength)

MLG_Average_heart_rate <- lm(Average_heart_rate~Age+Gender+Height+Weight+Sports_per_week,data=sport_data)
summary(MLG_Average_heart_rate)


## Modèle linéaire gaussien ##
# taille et poids ont été éliminés au profit de IMC

MLG_Free_throw <- lm(Free_throw~Age+Gender+Sports_per_week+IMC,data=sport_data)
summary(MLG_Free_throw)

MLG_Bench_press_reps <- lm(Bench_press_reps~Age+Gender+Sports_per_week+IMC,data=sport_data)
summary(MLG_Bench_press_reps)

MLG_Wheelchair_race <- lm(Wheelchair_race~Age+Gender+Sports_per_week+IMC,data=sport_data)
summary(MLG_Wheelchair_race)

MLG_Golf_strike_length <- lm(Golf_strike_length~Age+Gender+Sports_per_week+IMC,data=sport_data)
summary(MLG_Golf_strike_length)

MLG_40m_sprint <- lm(40m_sprint~Age+Gender+Sports_per_week+IMC,data=sport_data)
summary(MLG_40m_sprint)

MLG_Climbing_max_strength <- lm(Climbing_max_strength~Age+Gender+Sports_per_week+IMC,data=sport_data)
summary(MLG_Climbing_max_strength)

MLG_Climbing_critical_strength <- lm(Climbing_critical_strength~Age+Gender+Sports_per_week+IMC,data=sport_data)
summary(MLG_Climbing_critical_strength)

MLG_Average_heart_rate <- lm(Average_heart_rate~Age+Gender+Sports_per_week+IMC,data=sport_data)
summary(MLG_Average_heart_rate)


# Modèle PLS (Partial Least Squares) pour prendre en compte la multicolinéarité entre les prédicteurs
# Package plsdepot : fonction plsresg1 utilise l'algorithme NIPALS et permet de faire du PLS1 et du PLS2

## Modèle PLS1 ##
# Attention il y a une corrélation structurelle entre IMC, et taille et poids

# Free_throw
pls1_Free_throw <- plsreg1(sport_data[,c(2,4,5,6,11)],sport_data[,7], comps = 5, crosval = TRUE)
pls1_Free_throw$Q2 # La validation croisée
pls1_Free_throw <- plsreg1(sport_data[,c(2,4,5,6,11)],sport_data[,7], comps = x)
pls1_Free_throw$R2 # La contribution globale de chaque composante PLS à X et Y
pls1_Free_throw$raw.wgs # Les effect weights pour les X (whj)
pls1_Free_throw$x.loads # Les effect loadings pour les X (phj)
pls1_Free_throw$y.loads # Les inner regression coefficients (ch)
pls1_Free_throw$std.coefs # Les coefficients de regression standardisés (teta_hj*)
pls1_Free_throw$reg.coefs # Les coefficients de regression (teta_hj)

# Représentation de la carte des variables sur le plan (1,2)
plot(pls1_Free_throw$cor.xt[,1], pls1_Free_throw$cor.xt[,2],type = "n",xlab="t1",ylab="t2",main="Premier plan des variables (t1,t2)")
text(pls1_Free_throw$cor.xt[,1], pls1_Free_throw$cor.xt[,2], rownames(pls1_Free_throw$cor.xt))
abline(h=0)
abline(v=0)

# Bench_press_reps
pls1_Bench_press_reps <- plsreg1(sport_data[,c(2,4,5,6,11)],sport_data[,8], comps = 5, crosval = TRUE)
pls1_Bench_press_reps$Q2 # La validation croisée
pls1_Bench_press_reps <- plsreg1(sport_data[,c(2,4,5,6,11)],sport_data[,8], comps = x)
pls1_Bench_press_reps$R2 # La contribution globale de chaque composante PLS à X et Y
pls1_Bench_press_reps$raw.wgs # Les effect weights pour les X (whj)
pls1_Bench_press_reps$x.loads # Les effect loadings pour les X (phj)
pls1_Bench_press_reps$y.loads # Les inner regression coefficients (ch)
pls1_Bench_press_reps$std.coefs # Les coefficients de regression standardisés (teta_hj*)
pls1_Bench_press_reps$reg.coefs # Les coefficients de regression (teta_hj)

# Représentation de la carte des variables sur le plan (1,2)
plot(pls1_Bench_press_reps$cor.xt[,1], pls1_Bench_press_reps$cor.xt[,2],type = "n",xlab="t1",ylab="t2",main="Premier plan des variables (t1,t2)")
text(pls1_Bench_press_reps$cor.xt[,1], pls1_Bench_press_reps$cor.xt[,2], rownames(pls1_Bench_press_reps$cor.xt))
abline(h=0)
abline(v=0)

# Wheelchair_race
pls1_Wheelchair_race <- plsreg1(sport_data[,c(2,4,5,6,11)],sport_data[,9], comps = 5, crosval = TRUE)
pls1_Wheelchair_race$Q2 # La validation croisée
pls1_Wheelchair_race <- plsreg1(sport_data[,c(2,4,5,6,11)],sport_data[,9], comps = x)
pls1_Wheelchair_race$R2 # La contribution globale de chaque composante PLS à X et Y
pls1_Wheelchair_race$raw.wgs # Les effect weights pour les X (whj)
pls1_Wheelchair_race$x.loads # Les effect loadings pour les X (phj)
pls1_Wheelchair_race$y.loads # Les inner regression coefficients (ch)
pls1_Wheelchair_race$std.coefs # Les coefficients de regression standardisés (teta_hj*)
pls1_Wheelchair_race$reg.coefs # Les coefficients de regression (teta_hj)

# Représentation de la carte des variables sur le plan (1,2)
plot(pls1_Wheelchair_race$cor.xt[,1], pls1_Wheelchair_race$cor.xt[,2],type = "n",xlab="t1",ylab="t2",main="Premier plan des variables (t1,t2)")
text(pls1_Wheelchair_race$cor.xt[,1], pls1_Wheelchair_race$cor.xt[,2], rownames(pls1_Wheelchair_race$cor.xt))
abline(h=0)
abline(v=0)

# Golf_strike_length
pls1_Golf_strike_length <- plsreg1(sport_data[,c(2,4,5,6,11)],sport_data[,10], comps = 5, crosval = TRUE)
pls1_Golf_strike_length$Q2 # La validation croisée
pls1_Golf_strike_length <- plsreg1(sport_data[,c(2,4,5,6,11)],sport_data[,10], comps = x)
pls1_Golf_strike_length$R2 # La contribution globale de chaque composante PLS à X et Y
pls1_Golf_strike_length$raw.wgs # Les effect weights pour les X (whj)
pls1_Golf_strike_length$x.loads # Les effect loadings pour les X (phj)
pls1_Golf_strike_length$y.loads # Les inner regression coefficients (ch)
pls1_Golf_strike_length$std.coefs # Les coefficients de regression standardisés (teta_hj*)
pls1_Golf_strike_length$reg.coefs # Les coefficients de regression (teta_hj)

# Représentation de la carte des variables sur le plan (1,2)
plot(pls1_Golf_strike_length$cor.xt[,1], pls1_Golf_strike_length$cor.xt[,2],type = "n",xlab="t1",ylab="t2",main="Premier plan des variables (t1,t2)")
text(pls1_Golf_strike_length$cor.xt[,1], pls1_Golf_strike_length$cor.xt[,2], rownames(pls1_Golf_strike_length$cor.xt))
abline(h=0)
abline(v=0)


## Modèle PLS2 ##
# Attention il y a une corrélation structurelle entre IMC, et taille et poids

# Free_throw + Bench_press_reps + Wheelchair_race + Golf_strike_length
pls2_Free_throw <- plsreg2(sport_data[,c(2,4,5,6,11)],sport_data[,7:10], comps = 5, crosval = TRUE)
pls2_Free_throw$Q2 # La validation croisée
pls2_Free_throw <- plsreg2(sport_data[,c(2,4,5,6,11)],sport_data[,7:10], comps = x)
pls2_Free_throw$R2 # La contribution globale de chaque composante PLS à X et Y
pls2_Free_throw$raw.wgs # Les effect weights pour les X (whj)
pls2_Free_throw$x.loads # Les effect loadings pour les X (phj)
pls2_Free_throw$y.loads # Les inner regression coefficients (ch)
pls2_Free_throw$std.coefs # Les coefficients de regression standardisés (teta_hj*)
pls2_Free_throw$reg.coefs # Les coefficients de regression (teta_hj)

# Représentation de la carte des variables sur le plan (1,2)
plot(pls2_Free_throw$cor.xt[,1], pls2_Free_throw$cor.xt[,2],type = "n",xlab="t1",ylab="t2",main="Premier plan des variables (t1,t2)")
text(pls2_Free_throw$cor.xt[,1], pls2_Free_throw$cor.xt[,2], rownames(pls2_Free_throw$cor.xt))
abline(h=0)
abline(v=0)


## Modèle PLS1 ##
# IMC a été éliminé

# Free_throw
pls1_Free_throw <- plsreg1(sport_data[,c(2,4,5,6)],sport_data[,7], comps = 4, crosval = TRUE)
pls1_Free_throw$Q2 # La validation croisée
pls1_Free_throw <- plsreg1(sport_data[,c(2,4,5,6)],sport_data[,7], comps = x)
pls1_Free_throw$R2 # La contribution globale de chaque composante PLS à X et Y
pls1_Free_throw$raw.wgs # Les effect weights pour les X (whj)
pls1_Free_throw$x.loads # Les effect loadings pour les X (phj)
pls1_Free_throw$y.loads # Les inner regression coefficients (ch)
pls1_Free_throw$std.coefs # Les coefficients de regression standardisés (teta_hj*)
pls1_Free_throw$reg.coefs # Les coefficients de regression (teta_hj)

# Représentation de la carte des variables sur le plan (1,2)
plot(pls1_Free_throw$cor.xt[,1], pls1_Free_throw$cor.xt[,2],type = "n",xlab="t1",ylab="t2",main="Premier plan des variables (t1,t2)")
text(pls1_Free_throw$cor.xt[,1], pls1_Free_throw$cor.xt[,2], rownames(pls1_Free_throw$cor.xt))
abline(h=0)
abline(v=0)

# Bench_press_reps
pls1_Bench_press_reps <- plsreg1(sport_data[,c(2,4,5,6)],sport_data[,8], comps = 4, crosval = TRUE)
pls1_Bench_press_reps$Q2 # La validation croisée
pls1_Bench_press_reps <- plsreg1(sport_data[,c(2,4,5,6)],sport_data[,8], comps = x)
pls1_Bench_press_reps$R2 # La contribution globale de chaque composante PLS à X et Y
pls1_Bench_press_reps$raw.wgs # Les effect weights pour les X (whj)
pls1_Bench_press_reps$x.loads # Les effect loadings pour les X (phj)
pls1_Bench_press_reps$y.loads # Les inner regression coefficients (ch)
pls1_Bench_press_reps$std.coefs # Les coefficients de regression standardisés (teta_hj*)
pls1_Bench_press_reps$reg.coefs # Les coefficients de regression (teta_hj)

# Représentation de la carte des variables sur le plan (1,2)
plot(pls1_Bench_press_reps$cor.xt[,1], pls1_Bench_press_reps$cor.xt[,2],type = "n",xlab="t1",ylab="t2",main="Premier plan des variables (t1,t2)")
text(pls1_Bench_press_reps$cor.xt[,1], pls1_Bench_press_reps$cor.xt[,2], rownames(pls1_Bench_press_reps$cor.xt))
abline(h=0)
abline(v=0)

# Wheelchair_race
pls1_Wheelchair_race <- plsreg1(sport_data[,c(2,4,5,6)],sport_data[,9], comps = 4, crosval = TRUE)
pls1_Wheelchair_race$Q2 # La validation croisée
pls1_Wheelchair_race <- plsreg1(sport_data[,c(2,4,5,6)],sport_data[,9], comps = x)
pls1_Wheelchair_race$R2 # La contribution globale de chaque composante PLS à X et Y
pls1_Wheelchair_race$raw.wgs # Les effect weights pour les X (whj)
pls1_Wheelchair_race$x.loads # Les effect loadings pour les X (phj)
pls1_Wheelchair_race$y.loads # Les inner regression coefficients (ch)
pls1_Wheelchair_race$std.coefs # Les coefficients de regression standardisés (teta_hj*)
pls1_Wheelchair_race$reg.coefs # Les coefficients de regression (teta_hj)

# Représentation de la carte des variables sur le plan (1,2)
plot(pls1_Wheelchair_race$cor.xt[,1], pls1_Wheelchair_race$cor.xt[,2],type = "n",xlab="t1",ylab="t2",main="Premier plan des variables (t1,t2)")
text(pls1_Wheelchair_race$cor.xt[,1], pls1_Wheelchair_race$cor.xt[,2], rownames(pls1_Wheelchair_race$cor.xt))
abline(h=0)
abline(v=0)

# Golf_strike_length
pls1_Golf_strike_length <- plsreg1(sport_data[,c(2,4,5,6)],sport_data[,10], comps = 4, crosval = TRUE)
pls1_Golf_strike_length$Q2 # La validation croisée
pls1_Golf_strike_length <- plsreg1(sport_data[,c(2,4,5,6)],sport_data[,10], comps = x)
pls1_Golf_strike_length$R2 # La contribution globale de chaque composante PLS à X et Y
pls1_Golf_strike_length$raw.wgs # Les effect weights pour les X (whj)
pls1_Golf_strike_length$x.loads # Les effect loadings pour les X (phj)
pls1_Golf_strike_length$y.loads # Les inner regression coefficients (ch)
pls1_Golf_strike_length$std.coefs # Les coefficients de regression standardisés (teta_hj*)
pls1_Golf_strike_length$reg.coefs # Les coefficients de regression (teta_hj)

# Représentation de la carte des variables sur le plan (1,2)
plot(pls1_Golf_strike_length$cor.xt[,1], pls1_Golf_strike_length$cor.xt[,2],type = "n",xlab="t1",ylab="t2",main="Premier plan des variables (t1,t2)")
text(pls1_Golf_strike_length$cor.xt[,1], pls1_Golf_strike_length$cor.xt[,2], rownames(pls1_Golf_strike_length$cor.xt))
abline(h=0)
abline(v=0)


## Modèle PLS2 ##
# IMC a été éliminé

# Free_throw + Bench_press_reps + Wheelchair_race + Golf_strike_length
pls2_Free_throw <- plsreg2(sport_data[,c(2,4,5,6)],sport_data[,7:10], comps = 4, crosval = TRUE)
pls2_Free_throw$Q2 # La validation croisée
pls2_Free_throw <- plsreg2(sport_data[,c(2,4,5,6,11)],sport_data[,7:10], comps = x)
pls2_Free_throw$R2 # La contribution globale de chaque composante PLS à X et Y
pls2_Free_throw$raw.wgs # Les effect weights pour les X (whj)
pls2_Free_throw$x.loads # Les effect loadings pour les X (phj)
pls2_Free_throw$y.loads # Les inner regression coefficients (ch)
pls2_Free_throw$std.coefs # Les coefficients de regression standardisés (teta_hj*)
pls2_Free_throw$reg.coefs # Les coefficients de regression (teta_hj)

# Représentation de la carte des variables sur le plan (1,2)
plot(pls2_Free_throw$cor.xt[,1], pls2_Free_throw$cor.xt[,2],type = "n",xlab="t1",ylab="t2",main="Premier plan des variables (t1,t2)")
text(pls2_Free_throw$cor.xt[,1], pls2_Free_throw$cor.xt[,2], rownames(pls2_Free_throw$cor.xt))
abline(h=0)
abline(v=0)


## Modèle PLS1 ##
# taille et poids ont été éliminés au profit de IMC

# Free_throw
pls1_Free_throw <- plsreg1(sport_data[,c(2,6,11)],sport_data[,7], comps = 3, crosval = TRUE)
pls1_Free_throw$Q2 # La validation croisée
pls1_Free_throw <- plsreg1(sport_data[,c(2,6,11)],sport_data[,7], comps = x)
pls1_Free_throw$R2 # La contribution globale de chaque composante PLS à X et Y
pls1_Free_throw$raw.wgs # Les effect weights pour les X (whj)
pls1_Free_throw$x.loads # Les effect loadings pour les X (phj)
pls1_Free_throw$y.loads # Les inner regression coefficients (ch)
pls1_Free_throw$std.coefs # Les coefficients de regression standardisés (teta_hj*)
pls1_Free_throw$reg.coefs # Les coefficients de regression (teta_hj)

# Représentation de la carte des variables sur le plan (1,2)
plot(pls1_Free_throw$cor.xt[,1], pls1_Free_throw$cor.xt[,2],type = "n",xlab="t1",ylab="t2",main="Premier plan des variables (t1,t2)")
text(pls1_Free_throw$cor.xt[,1], pls1_Free_throw$cor.xt[,2], rownames(pls1_Free_throw$cor.xt))
abline(h=0)
abline(v=0)

# Bench_press_reps
pls1_Bench_press_reps <- plsreg1(sport_data[,c(2,6,11)],sport_data[,8], comps = 3, crosval = TRUE)
pls1_Bench_press_reps$Q2 # La validation croisée
pls1_Bench_press_reps <- plsreg1(sport_data[,c(2,6,11)],sport_data[,8], comps = x)
pls1_Bench_press_reps$R2 # La contribution globale de chaque composante PLS à X et Y
pls1_Bench_press_reps$raw.wgs # Les effect weights pour les X (whj)
pls1_Bench_press_reps$x.loads # Les effect loadings pour les X (phj)
pls1_Bench_press_reps$y.loads # Les inner regression coefficients (ch)
pls1_Bench_press_reps$std.coefs # Les coefficients de regression standardisés (teta_hj*)
pls1_Bench_press_reps$reg.coefs # Les coefficients de regression (teta_hj)

# Représentation de la carte des variables sur le plan (1,2)
plot(pls1_Bench_press_reps$cor.xt[,1], pls1_Bench_press_reps$cor.xt[,2],type = "n",xlab="t1",ylab="t2",main="Premier plan des variables (t1,t2)")
text(pls1_Bench_press_reps$cor.xt[,1], pls1_Bench_press_reps$cor.xt[,2], rownames(pls1_Bench_press_reps$cor.xt))
abline(h=0)
abline(v=0)

# Wheelchair_race
pls1_Wheelchair_race <- plsreg1(sport_data[,c(2,6,11)],sport_data[,9], comps = 3, crosval = TRUE)
pls1_Wheelchair_race$Q2 # La validation croisée
pls1_Wheelchair_race <- plsreg1(sport_data[,c(2,6,11)],sport_data[,9], comps = x)
pls1_Wheelchair_race$R2 # La contribution globale de chaque composante PLS à X et Y
pls1_Wheelchair_race$raw.wgs # Les effect weights pour les X (whj)
pls1_Wheelchair_race$x.loads # Les effect loadings pour les X (phj)
pls1_Wheelchair_race$y.loads # Les inner regression coefficients (ch)
pls1_Wheelchair_race$std.coefs # Les coefficients de regression standardisés (teta_hj*)
pls1_Wheelchair_race$reg.coefs # Les coefficients de regression (teta_hj)

# Représentation de la carte des variables sur le plan (1,2)
plot(pls1_Wheelchair_race$cor.xt[,1], pls1_Wheelchair_race$cor.xt[,2],type = "n",xlab="t1",ylab="t2",main="Premier plan des variables (t1,t2)")
text(pls1_Wheelchair_race$cor.xt[,1], pls1_Wheelchair_race$cor.xt[,2], rownames(pls1_Wheelchair_race$cor.xt))
abline(h=0)
abline(v=0)

# Golf_strike_length
pls1_Golf_strike_length <- plsreg1(sport_data[,c(2,6,11)],sport_data[,10], comps = 3, crosval = TRUE)
pls1_Golf_strike_length$Q2 # La validation croisée
pls1_Golf_strike_length <- plsreg1(sport_data[,c(2,6,11)],sport_data[,10], comps = x)
pls1_Golf_strike_length$R2 # La contribution globale de chaque composante PLS à X et Y
pls1_Golf_strike_length$raw.wgs # Les effect weights pour les X (whj)
pls1_Golf_strike_length$x.loads # Les effect loadings pour les X (phj)
pls1_Golf_strike_length$y.loads # Les inner regression coefficients (ch)
pls1_Golf_strike_length$std.coefs # Les coefficients de regression standardisés (teta_hj*)
pls1_Golf_strike_length$reg.coefs # Les coefficients de regression (teta_hj)

# Représentation de la carte des variables sur le plan (1,2)
plot(pls1_Golf_strike_length$cor.xt[,1], pls1_Golf_strike_length$cor.xt[,2],type = "n",xlab="t1",ylab="t2",main="Premier plan des variables (t1,t2)")
text(pls1_Golf_strike_length$cor.xt[,1], pls1_Golf_strike_length$cor.xt[,2], rownames(pls1_Golf_strike_length$cor.xt))
abline(h=0)
abline(v=0)


## Modèle PLS2 ##
# taille et poids ont été éliminés au profit de IMC

# Free_throw + Bench_press_reps + Wheelchair_race + Golf_strike_length
pls2_Free_throw <- plsreg2(sport_data[,c(2,6,11)],sport_data[,7:10], comps = 3, crosval = TRUE)
pls2_Free_throw$Q2 # La validation croisée
pls2_Free_throw <- plsreg2(sport_data[,c(2,6,11)],sport_data[,7:10], comps = x)
pls2_Free_throw$R2 # La contribution globale de chaque composante PLS à X et Y
pls2_Free_throw$raw.wgs # Les effect weights pour les X (whj)
pls2_Free_throw$x.loads # Les effect loadings pour les X (phj)
pls2_Free_throw$y.loads # Les inner regression coefficients (ch)
pls2_Free_throw$std.coefs # Les coefficients de regression standardisés (teta_hj*)
pls2_Free_throw$reg.coefs # Les coefficients de regression (teta_hj)

# Représentation de la carte des variables sur le plan (1,2)
plot(pls2_Free_throw$cor.xt[,1], pls2_Free_throw$cor.xt[,2],type = "n",xlab="t1",ylab="t2",main="Premier plan des variables (t1,t2)")
text(pls2_Free_throw$cor.xt[,1], pls2_Free_throw$cor.xt[,2], rownames(pls2_Free_throw$cor.xt))
abline(h=0)
abline(v=0)


##########################################################
# Construction d'indicateurs de performance individuelle #
##########################################################

## Etape 1 : transformation des variables endogènes initiales entre 0 et 1 ##

sport_data$Free_throw_std <- (sport_data$Free_throw-min(sport_data$Free_throw))/(max(sport_data$Free_throw)-min(sport_data$Free_throw))
sport_data$Bench_press_reps_std <- (sport_data$Bench_press_reps-min(sport_data$Bench_press_reps))/(max(sport_data$Bench_press_reps)-min(sport_data$Bench_press_reps))
sport_data$Wheelchair_race_std <- (sport_data$Wheelchair_race-min(sport_data$Wheelchair_race))/(max(sport_data$Wheelchair_race)-min(sport_data$Wheelchair_race))
sport_data$Golf_strike_length_std <- (sport_data$Golf_strike_length-min(sport_data$Golf_strike_length))/(max(sport_data$Golf_strike_length)-min(sport_data$Golf_strike_length))
sport_data$40m_sprint_std <- (sport_data$40m_sprint-min(sport_data$40m_sprint))/(max(sport_data$40m_sprint)-min(sport_data$40m_sprint))
sport_data$Climbing_max_strength_std <- (sport_data$Climbing_max_strength-min(sport_data$Climbing_max_strength))/(max(sport_data$Climbing_max_strength)-min(sport_data$Climbing_max_strength))
sport_data$Climbing_critical_strength_std <- (sport_data$Climbing_critical_strength-min(sport_data$Climbing_critical_strength))/(max(sport_data$Climbing_critical_strength)-min(sport_data$Climbing_critical_strength))
sport_data$Average_heart_rate_std <- (sport_data$Average_heart_rate-min(sport_data$Average_heart_rate))/(max(sport_data$Average_heart_rate)-min(sport_data$Average_heart_rate))


## Etape 2 : Proposition de différentes approches ##

# 1. Approche univariée

sport_data$Indic_uni <- 0.125*sport_data$Free_throw_std+0.125*sport_data$Bench_press_reps_std+0.125*sport_data$Wheelchair_race_std+0.125*sport_data$Golf_strike_length_std+0.125*sport_data$40m_sprint_std+0.125*sport_data$Climbing_max_strength_std+0.125*sport_data$Climbing_critical_strength_std+0.125*sport_data$Average_heart_rate_std
poids_uni <- matrix(0.125,nrow=8)
rownames(poids_uni) <- c('Free_throw_std','Bench_press_reps_std','Wheelchair_race_std','Golf_strike_length_std','40m_sprint_std','Climbing_max_strength_std','Climbing_critical_strength_std','Average_heart_rate_std')
colnames(poids_uni) <- c('poids_uni')


# 2. Approche multidimensionnelle

# 2-1. ACP : Free_throw + Bench_press_reps + Wheelchair_race + Golf_strike_length + 40m_sprint_std + Climbing_max_strength_std + Climbing_critical_strength_std + Average_heart_rate_std
acp_sport_data_endo <- PCA(sport_data[,12:19])
sport_data$Indic_ACP <- acp_sport_data_endo$ind$coord[,1]
poids_ACP <- as.matrix(acp_sport_data_endo$var$cor[,1]^2/acp_sport_data_endo$eig[1,1])
colnames(poids_ACP) <- c('poids_ACP')
sport_data$Indic_ACP <- as.matrix(sport_data[,12:15])%*%as.matrix(poids_ACP)


# 2-2. Classification de variables 

# Critère : the squared covariance is used as a measure of proximity (directional groups)
clv_sport_data_1 <- CLV(sport_data[,12:19],method="directional")
plot(clv_sport_data_1)
nb_cls <- 3
res_CLV <- summary(clv_sport_data_1)
# Please, give the number of groups : 3

support_lambda <- sum(res_CLV$prop_within)
prop_lambda <- res_CLV$prop_within/support_lambda
for (cls in 1:nb_cls)
    {num_cls <- matrix(cls,nrow=res_CLV$number[cls])
     if (cls == 1) {all_groups <- data.frame(res_CLV$groups[cls],num_cls)}
        else {all_groups <- rbind(all_groups,data.frame(res_CLV$groups[cls],num_cls))}
    }
num_cls <- 1:nb_cls
num_lambda <- data.frame(num_cls,t(prop_lambda))
fusion <-  inner_join(all_groups,num_lambda,by=c('num_cls'))
stat_groups <- fusion %>% group_by(num_cls) %>% summarise(som_cor=sum(cor.in.group))
stat_groups <- data.frame(stat_groups)
fusion <-  inner_join(fusion,stat_groups,by=c('num_cls'))
poids_CLV <- (fusion$cor.in.group/fusion$som_cor)*fusion[,4]
sport_data$Indic_CLV <- as.matrix(sport_data[,12:19])%*%as.matrix(poids_CLV)

poids_all <- data.frame(poids_uni,poids_ACP,poids_CLV)

# Construction d'un modèle graphique
free_mod_1 <- free_model(sport_data[,12:19],clv_sport_data_1,3,0.05,10,30)


# Critère : the covariance is used as a measure of proximity (local groups)
clv_sport_data_2 <- CLV(sport_data[,7:14],method="local")
plot(clv_sport_data_2)
summary(clv_sport_data_2)
# Please, give the number of groups : 3

# Construction d'un modèle graphique
free_mod_2 <- free_model(sport_data[,7:14],clv_sport_data_2,3,0.05,10,30)


#############################################################################
# Etude graphique des liens entre mes indicateurs et les variables exogènes #
#############################################################################

# Cartographie sur données standardisées
sport_data_stand <- scale(sport_data[,12:18])
sport_data_stand <- data.frame(sport_data_stand)
z <- as.matrix(t(sport_data[,12:18]))
x <- seq(1,7,length.out=7)
y <- seq(1,5,length.out=5)
par(oma=c(0,5,0,0),bg="white")
image(x,y,z,xlab="Variables",ylab="",main="Représentation des données Sport (standardisées) avec l'indicateur CLV",axes=FALSE)
axis(1, at = x,labels = rownames(z),las=1,cex.axis=1)
axis(2, at = y,labels = ,las=2,cex.axis=1)

# Cartographie des corrélations
col1 <- colorRampPalette(c("#7F0000", "red", "#FF7F00", "yellow", "white",
                           "cyan", "#007FFF", "blue", "#00007F"))
col2 <- colorRampPalette(c("#67001F", "#B2182B", "#D6604D", "#F4A582",
                           "#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
                           "#4393C3", "#2166AC", "#053061"))
col3 <- colorRampPalette(c("red", "white", "blue")) 
col4 <- colorRampPalette(c("#7F0000", "red", "#FF7F00", "yellow", "#7FFF7F",
                           "cyan", "#007FFF", "blue", "#00007F"))
whiteblack <- c("white", "black")
corrplot(cor(sport_data[,12:18]), method = "color", order = "hclust", addrect = 2, col = col1(100)) 

ggpairs(sport_data[,12:18])

